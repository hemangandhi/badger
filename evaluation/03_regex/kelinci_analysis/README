javac
Steps to run this example:

1. Build
mkdir bin
javac src/regexjdk8/*.java -d bin
javac -cp bin src/Regex.java -d bin

2. Instrument (use -skipmain flag!)
java -cp ../../instrumentor/build/libs/kelinci.jar edu.cmu.sv.kelinci.instrumentor.Instrumentor -i bin -o bin-instrumented -skipmain

3. Test with provided files. 
java -cp bin-instrumented edu.cmu.sv.kelinci.Kelinci -t 999999999 Regex @@ resources/lorem.txt
../../fuzzerside/interface resources/regex.txt

and

java -cp bin-instrumented edu.cmu.sv.kelinci.Kelinci -t 999999999 Regex resources/regex.txt @@
../../fuzzerside/interface resources/lorem.txt

...should both lead to the same result: a match, with 4671624 jumps on the first run and 4671587 on every later run. The difference in jumps is caused by the fact that the fixed file is only loaded on the first run.

4. Fuzz
Depending on which of the two experiments you want to run, fix one parameter and put an example of the other in in_dir. Fuzz in the regular way (see other README's for commands).

5. Study results
There is apparently a tool called Rexploiter that can determine the complexity class for a given regex. The SLOWFUZZ authors use this tool to determine how many exponential and super-linear regexes their tool comes up with.
For the experiment with fixed regexes, they use 25 different "popular" ones. Three of them are given in the appendix of the paper, but are not in the same syntax as Java uses so would have to be translated. I found this page, and put those regexes in the directory resources/popular-regexes so we can use those: http://www.mkyong.com/regular-expressions/10-java-regular-expression-examples-you-should-know/. This experiment is again about slowdown, so we should measure per regex how much slowdown we can generate with worst-case text files. As I felt we should keep text files small as well, I've limited them to 100 characters. The number 100 is chosen more or less randomly and could be changed. There are some results for the username regex, which show a 74% slowdown after one hour.

NOTE: limiting to 10 / 100 characters is not done if the file is in the "resources" directory. The motivation for this is that the regexes there are longer than 10 characters and this is ok, since they are intended to be used fixed and not fuzzed. Make sure that files that are fixed are in the resources directory, whereas files that are generated by the fuzzer are elsewhere.
